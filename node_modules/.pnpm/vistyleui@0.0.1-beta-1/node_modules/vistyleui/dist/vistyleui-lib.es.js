import { computed, createElementBlock, openBlock, createElementVNode, mergeProps, renderSlot, unref } from "vue";
const light = {
  "--bg-color": "#ffffff",
  "--text-color": "#5a6270",
  "--shadow-light-color": "#ffffff",
  "--shadow-dark-color": "#e0e0e0"
};
const dark = {
  "--bg-color": "#2a2e35",
  "--text-color": "#e0e5ec",
  "--shadow-light-color": "#41464b",
  "--shadow-dark-color": "#1f2228"
};
const blue$1 = {
  "--bg-color": "#d6e1ff",
  "--text-color": "#2d4587",
  "--shadow-light-color": "#f8ffff",
  "--shadow-dark-color": "#b4c1e0"
};
const green$1 = {
  "--bg-color": "#d6f5e5",
  "--text-color": "#246e4c",
  "--shadow-light-color": "#f9ffff",
  "--shadow-dark-color": "#b3e0c9"
};
const red$1 = {
  "--bg-color": "#ffe5e5",
  "--text-color": "#a02a2a",
  "--shadow-light-color": "#ffffff",
  "--shadow-dark-color": "#e0c0c0"
};
const _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const _hoisted_1$3 = { class: "neu-btn-container" };
const _hoisted_2$3 = ["disabled", "colorCustom"];
const _sfc_main$3 = {
  __name: "index",
  props: {
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["small", "medium", "large"].includes(value)
    },
    disabled: {
      type: Boolean,
      default: false
    },
    // 自定义颜色
    bgColor: {
      type: String,
      default: "#ffffff",
      required: true
    },
    textColor: {
      type: String,
      default: "#5a6270",
      required: () => (void 0).theme === "custom"
    },
    shadowLight: {
      type: String,
      default: "#ffffff",
      required: () => (void 0).theme === "custom"
    },
    shadowDark: {
      type: String,
      default: "#e0e0e0",
      required: () => (void 0).theme === "custom"
    },
    // 主题
    theme: {
      type: String,
      default: "light",
      validator: (value) => {
        console.log(value);
        return ["light", "dark", "blue", "green", "red", "custom"].includes(
          value
        );
      }
    }
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const sizeClass = computed(() => {
      return props.size === "medium" ? "btn-medium" : props.size === "large" ? "btn-large" : "btn-small";
    });
    const themeStyle = computed(() => {
      switch (props.theme) {
        case "light":
          return light;
        case "dark":
          return dark;
        case "blue": {
          return blue$1;
        }
        case "green": {
          return green$1;
        }
        case "red": {
          return red$1;
        }
        case "custom": {
          return {
            "--bg-color": props.bgColor,
            "--text-color": props.textColor,
            "--shadow-light-color": props.shadowLight,
            "--shadow-dark-color": props.shadowDark
          };
        }
      }
    });
    const handleClick = (event) => {
      emit("click", event);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$3, [
        createElementVNode("button", mergeProps({
          class: ["neu-btn", sizeClass.value],
          style: themeStyle.value,
          disabled: __props.disabled,
          onClick: handleClick,
          colorCustom: __props.theme === "custom"
        }, _ctx.$attrs), [
          renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ], 16, _hoisted_2$3)
      ]);
    };
  }
};
const ViNButton = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["__scopeId", "data-v-88b75849"]]);
function hexToRgb(hex) {
  console.log("hexToRgb", hex);
  hex = hex.replace(/^#/, "");
  if (hex.length === 3) {
    hex = hex.split("").map((char) => char + char).join("");
  }
  const r = parseInt(hex.substring(0, 2), 16);
  const g = parseInt(hex.substring(2, 4), 16);
  const b = parseInt(hex.substring(4, 6), 16);
  return {
    r,
    g,
    b
  };
}
function colorType(color) {
  const hexReg = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;
  const rgbReg = /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/;
  const rgbaReg = /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(0|1|0\.\d+)\)$/;
  console.log(
    "colorType",
    color,
    hexReg.test(color),
    rgbReg.test(color),
    rgbaReg.test(color)
  );
  if (hexReg.test(color)) {
    return "hex";
  } else if (rgbReg.test(color)) {
    return "rgb";
  } else if (rgbaReg.test(color)) {
    return "rgba";
  } else {
    return "";
  }
}
function rgbParse(rgb) {
  const rgbValues = rgb.match(/\d+/g);
  const r = parseInt(rgbValues[0]);
  const g = parseInt(rgbValues[1]);
  const b = parseInt(rgbValues[2]);
  return {
    r,
    g,
    b
  };
}
function useSizeClass(size) {
  const sizeClass = computed(() => {
    return size === "medium" ? "btn-medium" : size === "large" ? "btn-large" : "btn-small";
  });
  return {
    sizeClass
  };
}
const _hoisted_1$2 = { class: "glass-btn-container" };
const _hoisted_2$2 = ["disabled"];
const _sfc_main$2 = {
  __name: "index",
  props: {
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["small", "medium", "large"].includes(value)
    },
    disabled: {
      type: Boolean,
      default: false
    },
    theme: {
      type: String,
      default: "",
      validator: (value) => ["green", "blue", "red", "custom"].includes(value)
    },
    color: {
      type: String,
      default: "#fff"
    },
    bgRgba: {
      type: String,
      default: "rgba(255, 255, 255, 0.15)"
    },
    borderRgba: {
      type: String,
      default: "rgba(255, 255, 255, 0.2)"
    }
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const { sizeClass } = useSizeClass(props.size);
    const themeClass = computed(() => {
      if (props.theme === "custom") return "btn-custom-color";
      return props.theme === "green" ? "btn-green" : props.theme === "blue" ? "btn-blue" : props.theme === "red" ? "btn-red" : "";
    });
    const bgColorStyle = computed(() => {
      if (props.theme === "custom") {
        if (colorType(props.color) === "hex") {
          const { r, g, b } = hexToRgb(props.color);
          console.log(r, g, b);
          return {
            "--bg-color": `rgba(${r},${g},${b}, 0.1)`,
            "--bg-color-border": `rgba(${r},${g},${b}, 0.2)`
          };
        } else if (colorType(props.color) === "rgb") {
          const { r, g, b } = rgbParse(props.color);
          console.log("rrr", r, g, b);
          return {
            "--bg-color": `rgba(${r}, ${g}, ${b}, 0.1)`,
            "--bg-color-border": `rgba(${r}, ${g}, ${b}, 0.2)`
          };
        } else if (colorType(props.color) === "rgba") {
          return {
            "--bg-color": props.bgRgba,
            "--bg-color-border": props.borderRgba
          };
        } else {
          return {
            "--bg-color": "rgba(255, 100, 100, 0.1)",
            "--bg-color-border": "rgba(255, 100, 100, 0.2)"
          };
        }
      } else {
        return "";
      }
    });
    const handleClick = (event) => {
      emit("click", event);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$2, [
        createElementVNode("button", mergeProps({
          class: ["glass-btn", [unref(sizeClass), themeClass.value]],
          disabled: __props.disabled,
          style: bgColorStyle.value,
          onClick: handleClick
        }, _ctx.$attrs), [
          renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ], 16, _hoisted_2$2)
      ]);
    };
  }
};
const ViGButton = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["__scopeId", "data-v-9b21c460"]]);
const blue = {
  "--bg-color": "#4ecdc4",
  "--border-light": "#8ffff8",
  "--border-dark": "#3a9e97"
};
const green = {
  "--bg-color": "#6bff6b",
  "--border-light": "#aaffaa",
  "--border-dark": "#52cc52"
};
const red = {
  "--bg-color": "#ff6b6b",
  "--border-light": "#ffaaaa",
  "--border-dark": "#cc5252"
};
const _hoisted_1$1 = { class: "retro-btn-container" };
const _hoisted_2$1 = ["disabled"];
const _sfc_main$1 = {
  __name: "index",
  props: {
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["small", "medium", "large"].includes(value)
    },
    disabled: {
      type: Boolean,
      default: false
    },
    theme: {
      type: String,
      default: "",
      validator: (value) => ["green", "blue", "red", "custom"].includes(value)
    },
    bgColor: {
      type: String,
      default: ""
    },
    borderLight: {
      type: String,
      default: ""
    },
    borderDark: {
      type: String,
      default: ""
    }
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const handleClick = (event) => {
      emit("click", event);
    };
    const { sizeClass } = useSizeClass(props.size);
    const themeStyle = computed(() => {
      if (props.theme === "green") {
        return green;
      } else if (props.theme === "blue") {
        return blue;
      } else if (props.theme === "red") {
        return red;
      } else if (props.theme === "custom") {
        return {
          "--bg-color": props.bgColor,
          "--border-light": props.borderLight,
          "--border-dark": props.borderDark
        };
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$1, [
        createElementVNode("button", mergeProps({
          class: ["retro-btn", [unref(sizeClass)]],
          style: themeStyle.value,
          disabled: __props.disabled,
          onClick: handleClick
        }, _ctx.$attrs), [
          renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ], 16, _hoisted_2$1)
      ]);
    };
  }
};
const ViRButton = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__scopeId", "data-v-bf385a96"]]);
const _hoisted_1 = { class: "marquee-btn-container" };
const _hoisted_2 = ["disabled"];
const _sfc_main = {
  __name: "index",
  props: {
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["small", "medium", "large"].includes(value)
    },
    disabled: {
      type: Boolean,
      default: false
    }
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const handleClick = (event) => {
      emit("click", event);
    };
    const { sizeClass } = useSizeClass(props.size);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        createElementVNode("button", mergeProps({
          class: ["marquee-btn", [unref(sizeClass)]],
          disabled: __props.disabled,
          onClick: handleClick
        }, _ctx.$attrs), [
          renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ], 16, _hoisted_2)
      ]);
    };
  }
};
const ViMButton = /* @__PURE__ */ _export_sfc(_sfc_main, [["__scopeId", "data-v-3ff077cd"]]);
const components = {
  ViNButton,
  ViGButton,
  ViRButton,
  ViMButton
};
const install = (Vue) => {
  if (install.installed) return;
  install.installed = true;
  Object.keys(components).forEach((key) => {
    Vue.component(key, components[key]);
    Vue.component(kebabCase(key), components[key]);
  });
};
if (typeof window !== "undefined" && window.Vue) {
  window.Vue.use({ install });
}
const lib = {
  install,
  ...components
};
function kebabCase(str) {
  return str.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`).replace(/^-/, "");
}
export {
  ViGButton,
  ViMButton,
  ViNButton,
  ViRButton,
  lib as default
};
